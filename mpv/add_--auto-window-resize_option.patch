From 00f8e61367f594c21201bc73897301bb1158029e Mon Sep 17 00:00:00 2001
From: Dudemanguy <random342@airmail.cc>
Date: Tue, 19 Oct 2021 21:47:23 -0500
Subject: [PATCH] player: add --auto-window-resize option

mpv's window resizing logic always automatically resized the window
whenever the video resolution changed (i.e. advancing forward in a
playlist). This simply introduces the option to make this behavior
configurable. Every windowing backend would need to implement this
behavior in their code. This commit implements it for wayland, win32,
and x11.
---
 DOCS/man/options.rst   |  7 +++++++
 options/options.c      |  2 ++
 options/options.h      |  1 +
 video/out/w32_common.c |  5 +++--
 video/out/x11_common.c | 21 +++++++++++++--------
 video/out/x11_common.h |  5 ++---
 6 files changed, 28 insertions(+), 13 deletions(-)

diff --git a/DOCS/man/options.rst b/DOCS/man/options.rst
index 7e99b2a5d5a..139e43ebe99 100644
--- a/DOCS/man/options.rst
+++ b/DOCS/man/options.rst
@@ -3257,6 +3257,13 @@ Window
     there is a change in video parameters, video stream or file. This used to
     be the default behavior. Currently only affects X11 VOs.
 
+``--auto-window-resize=<yes|no>``
+    (Wayland, Win32, and X11)
+    By default, mpv will automatically resize itself if the video's size changes
+    (i.e. advancing forward in a playlist). Setting this to ``no`` disables this
+    behavior so the window size never changes automatically. This option does
+    not have any impact on the ``--autofit`` or ``--geometry`` options.
+
 ``--no-keepaspect``, ``--keepaspect``
     ``--no-keepaspect`` will always stretch the video to window size, and will
     disable the window manager hints that force the window aspect ratio.
diff --git a/options/options.c b/options/options.c
index dbd2a3f9bda..f1aab43deb0 100644
--- a/options/options.c
+++ b/options/options.c
@@ -118,6 +118,7 @@ static const m_option_t mp_vo_opt_list[] = {
     {"autofit", OPT_SIZE_BOX(autofit)},
     {"autofit-larger", OPT_SIZE_BOX(autofit_larger)},
     {"autofit-smaller", OPT_SIZE_BOX(autofit_smaller)},
+    {"auto-window-resize", OPT_FLAG(auto_window_resize)},
     {"window-scale", OPT_DOUBLE(window_scale), M_RANGE(0.001, 100)},
     {"window-minimized", OPT_FLAG(window_minimized)},
     {"window-maximized", OPT_FLAG(window_maximized)},
@@ -201,6 +202,7 @@ const struct m_sub_options vo_sub_opts = {
         .panscan = 0.0f,
         .scale_x = 1.0f,
         .scale_y = 1.0f,
+        .auto_window_resize = 1,
         .keepaspect = 1,
         .keepaspect_window = 1,
         .hidpi_window_scale = 1,
diff --git a/options/options.h b/options/options.h
index 86e95dc826a..e951883e864 100644
--- a/options/options.h
+++ b/options/options.h
@@ -48,6 +48,7 @@ typedef struct mp_vo_opts {
     struct m_geometry autofit_smaller;
     double window_scale;
 
+    int auto_window_resize;
     int keepaspect;
     int keepaspect_window;
     int hidpi_window_scale;
diff --git a/video/out/w32_common.c b/video/out/w32_common.c
index 4ef57dc53d7..64d69d8242c 100644
--- a/video/out/w32_common.c
+++ b/video/out/w32_common.c
@@ -1438,8 +1438,9 @@ static void gui_thread_reconfig(void *ptr)
     vo_calc_window_geometry3(vo, &screen, &mon, w32->dpi_scale, &geo);
     vo_apply_window_geometry(vo, &geo);
 
-    bool reset_size = w32->o_dwidth != vo->dwidth ||
-                      w32->o_dheight != vo->dheight;
+    bool reset_size = (w32->o_dwidth != vo->dwidth ||
+                       w32->o_dheight != vo->dheight) &&
+                       w32->opts->auto_window_resize;
 
     w32->o_dwidth = vo->dwidth;
     w32->o_dheight = vo->dheight;
diff --git a/video/out/x11_common.c b/video/out/x11_common.c
index 40d6b77420c..11e2524ec3c 100644
--- a/video/out/x11_common.c
+++ b/video/out/x11_common.c
@@ -1093,9 +1093,9 @@ static void vo_x11_check_net_wm_state_change(struct vo *vo)
             XFree(elems);
         }
 
-        if (opts->window_maximized && !is_maximized && x11->pending_geometry_change) {
+        if (opts->window_maximized && !is_maximized && x11->geometry_change) {
+            x11->geometry_change = false;
             vo_x11_config_vo_window(vo);
-            x11->pending_geometry_change = false;
         }
 
         opts->window_minimized = is_minimized;
@@ -1723,6 +1723,10 @@ void vo_x11_config_vo_window(struct vo *vo)
 
     assert(x11->window);
 
+    // Don't attempt to change autofit/geometry on maximized windows.
+    if (x11->geometry_change && opts->window_maximized)
+        return;
+
     vo_x11_update_screeninfo(vo);
 
     struct vo_win_geometry geo;
@@ -1736,7 +1740,9 @@ void vo_x11_config_vo_window(struct vo *vo)
         rc = (struct mp_rect){0, 0, RC_W(x11->winrc), RC_H(x11->winrc)};
     }
 
-    bool reset_size = x11->old_dw != RC_W(rc) || x11->old_dh != RC_H(rc);
+    bool reset_size = (x11->old_dw != RC_W(rc) || x11->old_dh != RC_H(rc)) &&
+                      (opts->auto_window_resize || x11->geometry_change);
+
     x11->old_dw = RC_W(rc);
     x11->old_dh = RC_H(rc);
 
@@ -1747,6 +1753,8 @@ void vo_x11_config_vo_window(struct vo *vo)
         vo_x11_highlevel_resize(vo, rc);
     }
 
+    x11->geometry_change = false;
+
     if (opts->ontop)
         vo_x11_setlayer(vo, opts->ontop);
 
@@ -1962,11 +1970,8 @@ static void vo_x11_set_geometry(struct vo *vo)
     if (!x11->window)
         return;
 
-    if (x11->opts->window_maximized) {
-        x11->pending_geometry_change = true;
-    } else {
-        vo_x11_config_vo_window(vo);
-    }
+    x11->geometry_change = true;
+    vo_x11_config_vo_window(vo);
 }
 
 bool vo_x11_check_visible(struct vo *vo) {
diff --git a/video/out/x11_common.h b/video/out/x11_common.h
index 48516a77ad5..de17113c557 100644
--- a/video/out/x11_common.h
+++ b/video/out/x11_common.h
@@ -118,9 +118,8 @@ struct vo_x11_state {
     bool size_changed_during_fs;
     bool pos_changed_during_fs;
 
-    /* The geometry/autofit option was changed while the window was maximized.
-     * Wait until the state changes to resize. */
-    bool pending_geometry_change;
+    /* One of the autofit/geometry options changed at runtime. */
+    bool geometry_change;
 
     XComposeStatus compose_status;
 
